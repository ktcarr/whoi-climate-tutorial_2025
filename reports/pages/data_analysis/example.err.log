Traceback (most recent call last):
  File "/Users/theo/research/whoi-climate-tutorial_2025/envs/lib/python3.11/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/theo/research/whoi-climate-tutorial_2025/envs/lib/python3.11/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/theo/research/whoi-climate-tutorial_2025/envs/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/theo/research/whoi-climate-tutorial_2025/envs/lib/python3.11/asyncio/base_events.py", line 654, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/Users/theo/research/whoi-climate-tutorial_2025/envs/lib/python3.11/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/Users/theo/research/whoi-climate-tutorial_2025/envs/lib/python3.11/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/theo/research/whoi-climate-tutorial_2025/envs/lib/python3.11/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
## specify server filepath (only required if loading from server)
SERVER_FP = pathlib.Path("/Volumes")

## specify whether to load data from cloud
LOAD_FROM_CLOUD = False

## specify lon/lat range
KWARGS = dict(lon_range=[260, 360], lat_range=[10, 70])

## keep track of time for data loading
t0 = time.time()

## do the data loading
if LOAD_FROM_CLOUD:
    data = load_era5_from_cloud(**KWARGS)

else:
    data = load_era5_from_server(SERVER_FP, **KWARGS)

## print elapsed time
print(f"{time.time() - t0: .1f} seconds")
------------------


[31m---------------------------------------------------------------------------[39m
[31mOSError[39m                                   Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[5][39m[32m, line 18[39m
[32m     15[39m     data = load_era5_from_cloud(**KWARGS)
[32m     17[39m [38;5;28;01melse[39;00m:
[32m---> [39m[32m18[39m     data = [43mload_era5_from_server[49m[43m([49m[43mSERVER_FP[49m[43m,[49m[43m [49m[43m*[49m[43m*[49m[43mKWARGS[49m[43m)[49m
[32m     20[39m [38;5;66;03m## print elapsed time[39;00m
[32m     21[39m [38;5;28mprint[39m([33mf[39m[33m"[39m[38;5;132;01m{[39;00mtime.time()[38;5;250m [39m-[38;5;250m [39mt0[38;5;132;01m:[39;00m[33m .1f[39m[38;5;132;01m}[39;00m[33m seconds[39m[33m"[39m)

[36mCell[39m[36m [39m[32mIn[4][39m[32m, line 11[39m, in [36mload_era5_from_server[39m[34m(server_fp, lon_range, lat_range)[39m
[32m      8[39m era5_fp_sst = server_fp / era5_fp / pathlib.Path([33m"[39m[33msea_surface_temperature[39m[33m"[39m)
[32m     10[39m [38;5;66;03m## open the data[39;00m
[32m---> [39m[32m11[39m data = [43mxr[49m[43m.[49m[43mopen_mfdataset[49m[43m([49m[43mera5_fp_sst[49m[43m.[49m[43mglob[49m[43m([49m[33;43m"[39;49m[33;43m*.nc[39;49m[33;43m"[39;49m[43m)[49m[43m)[49m[[33m"[39m[33msst[39m[33m"[39m]
[32m     13[39m [38;5;66;03m## select lon/lat range[39;00m
[32m     14[39m lonlat_idx = [38;5;28mdict[39m(longitude=[38;5;28mslice[39m(*lon_range), latitude=[38;5;28mslice[39m(*lat_range[::-[32m1[39m]))

[36mFile [39m[32m~/research/whoi-climate-tutorial_2025/envs/lib/python3.11/site-packages/xarray/backends/api.py:1597[39m, in [36mopen_mfdataset[39m[34m(paths, chunks, concat_dim, compat, preprocess, engine, data_vars, coords, combine, parallel, join, attrs_file, combine_attrs, **kwargs)[39m
[32m   1594[39m paths = _find_absolute_paths(paths, engine=engine, **kwargs)
[32m   1596[39m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m paths:
[32m-> [39m[32m1597[39m     [38;5;28;01mraise[39;00m [38;5;167;01mOSError[39;00m([33m"[39m[33mno files to open[39m[33m"[39m)
[32m   1599[39m paths1d: [38;5;28mlist[39m[[38;5;28mstr[39m | ReadBuffer]
[32m   1600[39m [38;5;28;01mif[39;00m combine == [33m"[39m[33mnested[39m[33m"[39m:

[31mOSError[39m: no files to open

